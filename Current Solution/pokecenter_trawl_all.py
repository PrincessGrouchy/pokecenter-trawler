# Generated by Selenium IDE
import pytest
import time
import json
import sys
import time

import selenium
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.ie.service import Service as IEService

from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from webdriver_manager.microsoft import IEDriverManager

from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.ie.options import Options as IEOptions


class TestPage1():
  def document_initialised(driver):
    return driver.execute_script("return initialised")


  def setup_method(self):
    # self.service = FirefoxService(executable_path=GeckoDriverManager().install())
    # self.driver = webdriver.Firefox(service=self.service)
    self.service = EdgeService(executable_path=EdgeChromiumDriverManager().install())
    self.driver = webdriver.Edge(service=self.service)

    self.driver.implicitly_wait(120)
    self.driver.set_window_size(776.642, 151.800)
    self.vars = {}
    self.region = "/en-ca" # "" # "/en-gb"
    self.vars["num_items_displayed"] = self.driver.execute_script("return 90")
    self.file1 = open('pokecenter_output_new.txt', 'w', encoding="utf-8")


  def teardown_method(self):
    self.driver.quit()
    self.file1.close()


  def print_line(self):
    if self.vars["stock"] == "SOLD OUT":
      in_stock = "NO"
    else:
      in_stock = "YES"
    product_number = self.vars["link"].replace("https://www.pokemoncenter.com"
    + self.region
    + "/product/", "").split("/")[0]
    realnumber = int(self.vars["page_count"]) - 1
    realnumber *= int(self.vars["num_items_displayed"])
    realnumber += int(self.vars["loop_count"])
    print(
      "{},".format(realnumber)
      + "{},".format(self.vars["link"])
      + "{},".format(product_number)
      + "{},".format(self.vars["name"])
      + "{},".format(self.vars["price"])
      + "{},".format(in_stock)
      + "{}-{}".format(self.vars["page_count"], self.vars["loop_count"])
      + '\n')
    self.file1.write(
      "{},".format(realnumber)
      + "{},".format(self.vars["link"])
      + "{},".format(product_number)
      + "{},".format(self.vars["name"])
      + "{},".format(self.vars["price"])
      + "{},".format(in_stock)
      + "{}-{}".format(self.vars["page_count"], self.vars["loop_count"])
      + '\n')


  def test_page1(self):
    self.vars["page_count"] = self.driver.execute_script("return 1")
    self.vars["loop_count"] = self.driver.execute_script("return 1")
    self.driver.get("https://www.pokemoncenter.com"
    + self.region
    + "/category/plush?sort=launch_date%2Bdesc&ps=90")
    WebDriverWait(self.driver, 120).until(lambda driver: 'Plush |' in driver.title)

    self.vars["total_count_string"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id='main']/div[2]/div[2]/div[2]/div[3]/div/div/h3/span").text)
    self.vars["total_count"] = self.vars["total_count_string"].split("of ")[1].replace(" )", "")
    self.vars["total_full_page_count"] = int(self.vars["total_count"]) // int(self.vars["num_items_displayed"])
    self.vars["total_page_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["total_full_page_count"])

    self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a").get_attribute("href"))
    self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/h3").text)
    self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/div/span").text)
    self.vars["stock"] = WebDriverWait(self.driver, 10000).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div/div").text)

    self.print_line()

    self.vars["loop_count"] = self.driver.execute_script("return 2")
    while self.driver.execute_script("return (arguments[0] < (arguments[1] + 1))",
    self.vars["loop_count"],
    self.vars["num_items_displayed"]):
      self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"])
      + "]/div/a").get_attribute("href"))
      self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"])
      + "]/div/a/div[2]/h3").text)
      self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"])
      + "]/div/a/div[2]/div/span").text)
      self.vars["stock"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"])
      + "]/div/a/div/div").text)

      self.print_line()

      self.vars["loop_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["loop_count"])


  def test_page2(self):
    self.vars["page_count"] = self.driver.execute_script("return 2")
    self.vars["loop_count"] = self.driver.execute_script("return 1")

    while self.driver.execute_script("return (arguments[0] < (arguments[1]))",
    self.vars["page_count"],
    self.vars["total_page_count"]):
      self.vars["loop_count"] = self.driver.execute_script("return 1")
      self.driver.get("https://www.pokemoncenter.com"
      + self.region
      + "/category/plush?sort=launch_date%2Bdesc&ps=90&page="
      + str(self.vars["page_count"]))
      self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a").get_attribute("href"))
      self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/h3").text)
      self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/div/span").text)
      self.vars["stock"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div/div").text)

      self.print_line()

      self.vars["loop_count"] = self.driver.execute_script("return 2")
      while self.driver.execute_script("return (arguments[0] < (arguments[1] + 1))",
      self.vars["loop_count"],
      self.vars["num_items_displayed"]):
        self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
        "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
        + str(self.vars["loop_count"]) + "]/div/a").get_attribute("href"))
        self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
        "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
        + str(self.vars["loop_count"]) + "]/div/a/div[2]/h3").text)
        self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
        "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
        + str(self.vars["loop_count"]) + "]/div/a/div[2]/div/span").text)
        self.vars["stock"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
        "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
        + str(self.vars["loop_count"]) + "]/div/a/div/div").text)

        self.print_line()

        self.vars["loop_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["loop_count"])
      time.sleep(10)
      self.vars["page_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["page_count"])


  def test_page_last(self):
    # self.vars["total_count"] = 1079
    self.vars["total_full_page_count"] = int(self.vars["total_count"]) // int(self.vars["num_items_displayed"])
    self.vars["total_page_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["total_full_page_count"])

    self.vars["page_count"] = self.driver.execute_script("return arguments[0]", self.vars["total_page_count"])
    self.vars["loop_count"] = self.driver.execute_script("return 1")

    time.sleep(20)
    self.driver.get("https://www.pokemoncenter.com"
    + self.region
    + "/category/plush?sort=launch_date%2Bdesc&ps=90&page="
    + str(self.vars["page_count"]))
    self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a").get_attribute("href"))
    self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/h3").text)
    self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div[2]/div/span").text)
    self.vars["stock"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
    "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div/div/a/div/div").text)

    self.print_line()

    self.vars["loop_count"] = self.driver.execute_script("return 2")
    self.vars["past_items"] = int(self.vars["total_full_page_count"]) * int(self.vars["num_items_displayed"])

    self.vars["new_num_items"] = int(self.vars["total_count"]) - int(self.vars["past_items"])

    while self.driver.execute_script("return (arguments[0] < (arguments[1] + 1))",
    self.vars["loop_count"],
    self.vars["new_num_items"]):
      self.vars["link"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"]) + "]/div/a").get_attribute("href"))
      self.vars["name"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"]) + "]/div/a/div[2]/h3").text)
      self.vars["price"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"]) + "]/div/a/div[2]/div/span").text)
      self.vars["stock"] = WebDriverWait(self.driver, 120).until(lambda d: d.find_element(By.XPATH,
      "//main[@id=\'main\']/div[2]/div[2]/div[2]/div[4]/div["
      + str(self.vars["loop_count"]) + "]/div/a/div/div").text)

      self.print_line()

      self.vars["loop_count"] = self.driver.execute_script("return arguments[0] + 1", self.vars["loop_count"])


try:
  x = TestPage1()
  x.setup_method()
  x.test_page1()
  x.test_page2()
  x.test_page_last()
  x.teardown_method()
finally:
  x.teardown_method()
